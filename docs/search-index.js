var searchIndex = JSON.parse('{\
"ll_stack":{"doc":"","t":"DDDDIILLLLLLLLLLLLLLLLLLLLLKLLLLKLKLKLLLLKLKLKLKLLLLLLLLLLLLLLL","n":["GenericStack","IntoIter","Iter","IterMut","Iterators","Stack","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","fmt","from","from","from","from","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","iter","iter","iter_mut","iter_mut","new","new","next","next","next","peek","peek","peek_mut","peek_mut","pop","pop","push","push","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["ll_stack","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["<code>GenericStack&lt;T&gt;</code> is a linked-list based implementation of a …","","","","We define trait Iterators to define a three iterators for …","trait <code>Stack&lt;T&gt;</code> defines the method a generic monomorphic …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","iterator for <code>ll_stack&lt;T&gt;</code>","the iterator starts with the head element and method next()","mutable iterator for <code>ll_stack&lt;T&gt;</code>","","Create a new monomorphic stack storing elements of type <code>&lt;T&gt;</code>…","Create a new monomorphic stack storing elements of type <code>&lt;T&gt;</code>…","","","","borrows the top element of the stack if the stack is not …","borrows the top element of the stack if the stack is not …","borrows the top element of the stack as a mutable value if …","borrows the top element of the stack as a mutable value if …","Returns the top element of the stack if it exists, i.e., …","Returns the top element of the stack if it exists, i.e., …","push a new element on the top element of the stack.","push a new element on the top element of the stack.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,9,10,11,5,9,10,11,5,5,5,5,5,5,9,10,11,5,9,10,11,5,16,9,10,11,5,16,5,16,5,17,5,9,10,11,17,5,17,5,17,5,17,5,5,5,9,10,11,5,9,10,11,5,9,10,11,5],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[[0,[1,2,3,4,1]]]]],[[5,[[0,[1,2,3,4,1]]]]]],[[]],[[[5,[[0,[3,2,3,4,1]]]],5],6],[[[5,[[0,[2,3,4,1]]]],7],8],[[[5,[[0,[2,2,3,4,1]]]],7],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[]],[[]],[[]],[[[5,[[0,[2,3,1,4]]]]],[[9,[[0,[2,3,1,4]]]]]],[[],10],[[[5,[[0,[2,3,1,4]]]]],[[10,[[0,[2,3,1,4]]]]]],[[],11],[[[5,[[0,[2,3,1,4]]]]],[[11,[[0,[2,3,1,4]]]]]],[[]],[[],[[5,[[0,[2,3,1,4]]]]]],[[[9,[[0,[2,3,1,4]]]]],12],[[[10,[[0,[2,3,1,4]]]]],12],[[[11,[[0,[2,3]]]]],12],[[],12],[[[5,[[0,[2,3,1,4]]]]],12],[[],12],[[[5,[[0,[2,3,1,4]]]]],12],[[],12],[[[5,[[0,[2,3,1,4]]]]],[[12,[[0,[2,3,1,4]]]]]],[[]],[[[5,[[0,[2,3,1,4]]]],[0,[2,3,1,4]]]],[[]],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15]],"p":[[8,"Clone"],[8,"Debug"],[8,"PartialEq"],[8,"Display"],[3,"GenericStack"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"Iterators"],[8,"Stack"]]},\
"stack_main":{"doc":"","t":"DLLLLLLLLLLLFLLLLLM","n":["Du64","borrow","borrow_mut","clone","clone_into","default","drop","eq","fmt","fmt","from","into","main","to_owned","to_string","try_from","try_into","type_id","value"],"q":["stack_main","","","","","","","","","","","","","","","","","",""],"d":["A simple struct to demonstrate how to use of the <code>ll_stack</code> …","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1],"f":[0,[[]],[[]],[1,1],[[]],[[],1],[1],[[1,1],2],[[1,3],4],[[1,3],4],[[]],[[]],[[]],[[]],[[],5],[[],6],[[],6],[[],7],0],"p":[[3,"Du64"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"stack_trait":{"doc":"","t":"IKKKKK","n":["Stack","new","peek","peek_mut","pop","push"],"q":["stack_trait","","","","",""],"d":["trait <code>Stack&lt;T&gt;</code> defines the method a generic monomorphic …","Create a new monomorphic stack storing elements of type <code>&lt;T&gt;</code>…","borrows the top element of the stack if the stack is not …","borrows the top element of the stack as a mutable value if …","Returns the top element of the stack if it exists, i.e., …","push a new element on the top element of the stack."],"i":[0,2,2,2,2,2],"f":[0,[[]],[[],1],[[],1],[[],1],[[]]],"p":[[4,"Option"],[8,"Stack"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
